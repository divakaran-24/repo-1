class Solution {
    public String minWindow(String s, String t) {
        if (s == null || t == null || s.length() == 0 || t.length() == 0) {
            return "";
        }

        // Step 1: nama t values store pananum
        Map<Character, Integer> tmap = new HashMap<>();
        for (int i = 0; i < t.length(); i++) {
            char c = t.charAt(i);
            tmap.put(c, tmap.getOrDefault(c, 0) + 1);
        }

        // matha elam substring window la podanum
        Map<Character, Integer> window = new HashMap<>();
        int left = 0, right = 0;
        int formed = 0;
        int required = tmap.size(); 

        // [window length, left, right]
        int[] ans = {-1, 0, 0};

        while (right < s.length()) {
            char c = s.charAt(right);
            window.put(c, window.getOrDefault(c, 0) + 1);

            // If character count matches in window and tmap
            if (tmap.containsKey(c) && window.get(c).intValue() == tmap.get(c).intValue()) {
                formed++;
            }

            // Try to shrink the window from left
            while (left <= right && formed == required) {
                // Update answer if smaller window is found
                if (ans[0] == -1 || right - left + 1 < ans[0]) {
                    ans[0] = right - left + 1;
                    ans[1] = left;
                    ans[2] = right;
                }

                // left la iruka character a remove
                char ch = s.charAt(left);
                window.put(ch, window.get(ch) - 1);

                if (tmap.containsKey(ch) && window.get(ch) < tmap.get(ch)) {
                    formed--;
                }

                left++;
            }

            right++;
        }

        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}
