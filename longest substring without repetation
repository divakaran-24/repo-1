method 1
class Solution {
    public int lengthOfLongestSubstring(String s) {
         int left = 0;
         int maxlen = 0;
         Map<Character, Integer> map = new HashMap<>();
         for(int right = 0; right<s.length(); right++)
         {
            char c = s.charAt(right);
            if(map.containsKey(c))
            {
                left = Math.max(left,map.get(c)+1);
            }
            map.put(c,right);
            maxlen = Math.max(maxlen,(right-left+1));
         }
         return maxlen;
    }
    
}

method 2

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashSet<Character> set = new HashSet<>(); 
        int left = 0;
        int ans = 0;
        if(s.length() == 0 || s==null)
        {
            return 0;
        }
        if(s.length() == 1)
        {
            return 1;
        }
        for(int right = 0; right<s.length(); right++)
        {
            //oru oru charactera edukurom
            char c = s.charAt(right);
            while(set.contains(c))
            {
                // athu set la irundha remove panite varom and left increment panurom
                set.remove(s.charAt(left));
                left++;
            }
            // apudi set ilena set add panurom
            set.add(c);
            //eduka eduka max length ans la store panurom
            ans = Math.max(ans,right-left+1);
        }

        return ans;

    }

}
